name: CD

on:
  push:
    branches: ["main"]

jobs:
  build:
    runs-on: ${{vars.HOST_IMAGE}}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: main
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{vars.PYTHON_VERSION}}
      - name: Login image repository
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_SECRET }}

      - name: Setup Docker Buildx
        uses: docker/setup-buildx-action@v3
        id: buildx
        with:
          platforms: linux/amd64,linux/amd64/v2,linux/amd64/v3,linux/amd64/v4,linux/386

      - name: Build and push docker image to hub
        uses: docker/build-push-action@v5
        id: docker_build
        with:
          file: ./docker_envs/env1/Dockerfile
          builder: ${{ steps.buildx.outputs.name }}
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/${{secrets.DOCKER_IMAGE}}:${{vars.AI_ASSISTANT_TAG}}
          build-args: |
            "AI_ASSISTANT_IMAGE=${{ vars.AI_ASSISTANT_IMAGE }}"
            "APP_ENV=${{ vars.APP_ENV }}"
          secrets: |
            "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}"
            "GEMINI_API_KEY=${{ secrets.GEMINI_API_KEY }}"
            "OPENAI_MODEL=${{ secrets.OPENAI_MODEL }}"
            "GEMINI_MODEL=${{ secrets.GEMINI_MODEL }}"
            "REDIS_HOST=${{ secrets.REDIS_HOST }}"
            "REDIS_PORT=${{ secrets.REDIS_PORT }}"
            "ALLOWED_HOST_1=${{ secrets.ALLOWED_HOST_1 }}"
            "ALLOWED_HOST_2=${{ secrets.ALLOWED_HOST_2 }}"
            "PORT=${{ secrets.PORT }}"

      - name: Verify docker job
        run: echo ${{ steps.docker_build.outputs.digest }}
  deploy:
    runs-on: ${{vars.HOST_IMAGE}}
    needs: [build]
    steps:
      - name: Access host and deploy app
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.ORC_HOST }}
          username: ${{ secrets.ORC_USERNAME }}
          key: ${{ secrets.ORC_SSH_KEY }}
          script: |
            ${{vars.AI_ASSISTANT_CMD}} echo ${{ secrets.DOCKER_SECRET }} | ${{vars.AI_ASSISTANT_CMD}} docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
            ${{vars.AI_ASSISTANT_CMD}} docker pull ${{ secrets.DOCKER_USERNAME }}/${{secrets.DOCKER_IMAGE}}:${{vars.AI_ASSISTANT_TAG}} || true
            ${{vars.AI_ASSISTANT_CMD}} docker stop ${{vars.AI_ASSISTANT_CONTAINER}}-1 || true
            ${{vars.AI_ASSISTANT_CMD}} docker rm ${{vars.AI_ASSISTANT_CONTAINER}}-1 || true
            ${{vars.AI_ASSISTANT_CMD}} docker run -d --restart unless-stopped -p ${{ vars.AI_ASSISTANT_EXPOSE_PORT_1 }}:${{ vars.AI_ASSISTANT_PORT }} --network ${{vars.NETWORK}} --name ${{vars.AI_ASSISTANT_CONTAINER}}-1 ${{ secrets.DOCKER_USERNAME }}/${{secrets.DOCKER_IMAGE}}:${{vars.AI_ASSISTANT_TAG}} || true
            ${{vars.AI_ASSISTANT_CMD}} docker image prune -af || true
            ${{vars.AI_ASSISTANT_CMD}} docker volume prune -af || true

#            ${{vars.AI_ASSISTANT_CMD}} docker stop ${{vars.AI_ASSISTANT_CONTAINER}}-2 || true
#            ${{vars.AI_ASSISTANT_CMD}} docker rm ${{vars.AI_ASSISTANT_CONTAINER}}-2 || true
#            ${{vars.AI_ASSISTANT_CMD}} docker run -d --restart unless-stopped -p ${{ vars.AI_ASSISTANT_EXPOSE_PORT_2 }}:${{ vars.AI_ASSISTANT_PORT }} --network ${{vars.NETWORK}} --name ${{vars.AI_ASSISTANT_CONTAINER}}-2 ${{ secrets.DOCKER_USERNAME }}/${{secrets.DOCKER_IMAGE}}:${{vars.AI_ASSISTANT_TAG}} || true
